// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Riot.lnk (1.914kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _riotLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x5f\x48\x73\x65\x1c\xc7\x3f\x4b\xc3\x24\x02\x45\x91\x34\xc3\x11\x4e\xa2\x38\xa7\x33\xdd\xe6\xce\x20\xd0\xf6\x87\xa9\x53\xc7\xc6\x40\xe4\x04\x1d\x8f\xc7\x1c\x6c\x6e\x9e\x4d\xdc\x42\x92\x20\xb0\xa2\x20\x2a\x28\x2f\x42\x91\x20\x83\x1a\x74\xad\x44\x74\x13\x74\x21\x5e\x18\x86\x41\x66\x11\x52\x54\x82\x5d\x05\x5d\xc4\x79\xb6\x51\x4e\xe1\x7d\xe1\xbd\x7a\x5f\xde\xef\xc5\xf3\xdb\xf3\xfc\xbe\xcf\xf7\xf9\xfe\x7e\xe3\xfc\x62\x80\xa3\xf3\x01\x6c\x7c\x29\x56\x22\xa7\x23\xe0\x04\x3a\x06\x7e\x4f\x1e\x9c\x1f\x39\xda\x27\xab\xf1\xd5\xfd\xf7\x76\xbe\x3e\x3f\x72\x30\xde\x2c\x88\x0e\xae\xe2\x67\x3a\xe9\x8b\xff\x38\x7d\xe8\xfc\x2d\x90\x6e\xdb\xf9\xee\x21\x9e\x56\x94\x0f\xbb\x79\x26\x18\xd0\xb8\x8e\x59\xdc\x22\xae\x4f\x9d\x14\xda\xb0\xd2\xb9\xa2\xb4\x6a\xce\xc1\x73\xb4\xd2\xcc\xc5\x17\xeb\x53\xc7\x05\x3b\x27\x03\x4f\x1c\x37\x01\x8f\x34\x28\x78\x2e\x5f\xc3\x22\x4d\x8e\x22\x12\xab\x98\xcc\x01\x8f\x32\xcb\x20\xb6\xc9\xf5\xa9\xd9\xac\x93\x44\x3a\x57\x94\xcd\x92\xd9\xa8\x7c\x2c\x94\x2d\xc3\x2e\xa6\xa5\x41\x79\x6d\x73\x89\x44\x4d\x59\xc6\xa4\x84\x29\x94\x61\x02\xe8\xad\x15\x6f\x47\x6f\xed\xc6\x38\xd0\x0d\xd8\x3e\x83\x7b\xbd\x5a\x1b\x10\x4a\xf7\x2f\xaf\x98\xce\x20\xc1\x80\x56\xaf\x4f\xfb\xcf\x4e\x3f\xa3\x38\x59\xc0\x44\xa7\xc8\x0a\x16\x26\x92\x28\xc8\x60\x11\x27\x06\x19\xd2\x98\x2c\x51\x14\xbc\x1c\x16\x4e\x26\x05\xdb\x66\x95\x90\xc5\xd9\x8b\xf4\x20\x23\xa3\x5d\x59\x1b\x1b\xa3\x5d\x2b\xe8\x61\x82\x04\x6e\x60\xca\xb5\xf3\x14\x05\x4c\x2c\x0a\x68\x18\x58\xe8\xbc\x44\x19\x8d\x51\xf2\xe4\x09\x09\x1f\x3a\x1a\x31\x72\x18\xe8\x64\x6e\xeb\xd5\xce\x26\xd1\xee\x6d\x57\x2a\x19\x4e\xc4\x13\xd3\x91\xb1\x58\xd8\xa5\x8d\xe6\xf3\x21\xbd\xa8\x6b\xb1\x9c\xa1\x67\x6e\x6a\xd6\x3d\x09\x17\x29\x92\x84\x49\x10\x27\xc1\x34\x11\xc6\x88\x11\xc6\x75\xc7\x5d\xbe\x8f\xbb\x09\x2f\x54\x07\xc7\xf6\x4c\x6d\x9f\x37\xa4\x45\x7d\xde\x2c\xd4\xf3\xf3\x95\x4a\xb1\x7c\xf9\x69\xf8\x9d\x57\x7e\xf9\xe4\x64\x77\xa3\xb9\x25\xd4\xf5\x67\x25\xf9\x6b\xfb\x66\x79\xed\x29\xb7\xd2\x74\x71\xab\xfc\xdb\x0e\x68\x85\xed\xd7\x01\x77\x32\x9e\xfc\xe9\x8d\x99\xc8\x7e\xcc\x1f\xdc\xfb\xa7\xe3\xdd\x81\x0f\xb2\x07\x59\x40\xcc\xf4\x3e\xc0\x9e\x8a\x49\x24\xdc\x48\x78\x91\x18\x14\xbf\x86\x18\x46\xc5\x83\x07\x15\x15\x1f\x7e\x7c\x22\xa7\xe2\x45\xc1\x23\xf6\x83\xf8\x05\xd3\x8b\x07\x05\x05\x37\xc3\xe2\x86\x4f\xa8\x55\x4f\xaa\xf8\xaa\x66\x24\xf5\x64\x6c\xab\xbc\xa5\x4e\xec\x1e\x9e\x1d\x49\x67\xdf\xfe\xf5\x3c\xd0\x53\x37\xe2\xb2\x47\x3c\x6e\xdc\xcc\x0b\x69\x03\x15\x09\x03\x13\x1f\xba\x30\xe7\x17\x96\x24\x74\x4c\x86\x58\x40\x42\x15\xfc\x05\x61\x48\x11\x79\x3b\xea\xe2\xd1\x31\xe0\xc1\xba\xf8\x63\x80\x41\x8e\x2c\x32\x05\x96\x59\x21\x8d\x25\x46\x70\x06\xf9\x86\x91\x58\xff\xc0\xea\x50\x6b\x15\x7c\xde\x95\x0d\x7d\xf6\x56\x3e\xfa\x71\x74\x44\xfe\xe8\xd9\xd2\x9b\x8f\x03\x8b\x36\x21\x0a\x9c\xfe\xd0\xf3\xc7\xc6\xdf\x17\xd1\xf7\x2b\xdf\x4f\xb4\x7c\xf3\xb2\xf2\xff\xff\xfc\xdf\x00\x00\x00\xff\xff\x23\xdf\x18\x15\x7a\x07\x00\x00")

func riotLnkBytes() ([]byte, error) {
	return bindataRead(
		_riotLnk,
		"Riot.lnk",
	)
}

func riotLnk() (*asset, error) {
	bytes, err := riotLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Riot.lnk", size: 1914, mode: os.FileMode(0666), modTime: time.Unix(1554042680, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0xac, 0x99, 0x4, 0x1, 0xee, 0x49, 0x58, 0xf0, 0xf3, 0x86, 0x2f, 0x17, 0xa0, 0x3e, 0x51, 0x2e, 0xb6, 0x53, 0xf1, 0x8f, 0xd8, 0x57, 0x46, 0x95, 0x75, 0x90, 0x1f, 0x5f, 0x24, 0x46, 0xf9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Riot.lnk": riotLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Riot.lnk": &bintree{riotLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
